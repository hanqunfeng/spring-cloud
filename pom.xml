<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.pyf</groupId>
    <artifactId>spring-cloud</artifactId>
    <version>0.0.1</version>
    <packaging>pom</packaging>

    <name>spring-cloud</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <modules>
        <module>eureka-server</module>
        <module>eureka-provider</module>
        <module>eureka-ribbon</module>
        <module>feign</module>
        <module>admin-server</module>
        <module>turbine</module>
        <module>zuul</module>
        <module>config-server</module>
        <module>oauth2-jwt</module>
        <module>oauth2-jwt-common</module>
        <!--<module>zipkin-server</module>-->
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Finchley.SR2</spring-cloud.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>


    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--解决font-awesome字体文件被maven过滤导致不能正常显示的问题-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>woff</nonFilteredFileExtension>
                        <nonFilteredFileExtension>woff2</nonFilteredFileExtension>
                        <nonFilteredFileExtension>eot</nonFilteredFileExtension>
                        <nonFilteredFileExtension>ttf</nonFilteredFileExtension>
                        <nonFilteredFileExtension>svg</nonFilteredFileExtension>
                        <nonFilteredFileExtension>key</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>


            <!--docker-maven插件，可以生成镜像并部署到docker服务中，如果不配置dockerHost，则会读取环境变量DOCKER_HOST,如果也没有配置则默认部署到本地-->
            <!-- 将docker的命令目标绑定到maven的verify阶段，也就是说，执行maven verify时就会自动创建镜像、打好tag、发布到私服（按声明顺序执行） -->
            <!--这里有一个问题，parent项目并不需要创建镜像，所以在打tag时就会报错，提示找不到parent项目的镜像，
            解决方法是在docker服务中随便创建一个与parent项目对应的镜像即可，比如我这里选择使用hello-world镜像（大小只有几k）创建一个tag为当前parent项目的镜像
            docker tag hello-world:latest pyf/spring-cloud:0.0.1 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.0</version>
                <executions>
                    <execution>
                        <id>build-image</id>     <!--定义一个执行命令的id-->
                        <phase>verify</phase>   <!--绑定mvn的哪个命令-->
                        <goals>
                            <goal>build</goal>   <!--要执行的命令 -->
                        </goals>
                    </execution>
                    <execution>
                        <id>image-tag</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>tag</goal>      <!--tag命令，相当于docker的tag命令-->
                        </goals>
                        <configuration>
                            <image>pyf/${project.artifactId}:${project.version}</image>   <!--镜像名-->
                            <newName>10.211.55.13/library/${project.artifactId}:${project.version}</newName>   <!--打的标签名-->
                        </configuration>
                    </execution>
                    <execution>
                        <id>package-push</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>push</goal>    <!--相当于docker的push命令-->
                        </goals>
                        <configuration>
                            <imageName>10.211.55.13/library/${project.artifactId}:${project.version}</imageName>  <!--要push的镜像名-->
                            <serverId>docker-harbor</serverId>   <!--mvn setting.xml配置的那个id，私服对应的用户名和密码-->
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <forceTags>true</forceTags>  <!--覆盖相同标签镜像-->
                    <dockerHost>http://10.211.55.13:2375</dockerHost>  <!-- 指定仓库地址 -->
                    <imageName>pyf/${project.artifactId}:${project.version}</imageName>  <!--指定镜像名称 仓库/镜像名:标签-->
                    <dockerDirectory>${basedir}/docker</dockerDirectory>  <!-- Dockerfile所在路径 -->
                    <resources>
                        <resource>  <!-- 指定资源文件 -->
                            <targetPath>/</targetPath>  <!-- 指定要复制的目录路径，这里是当前目录 -->
                            <directory>${project.build.directory}</directory>  <!-- 指定要复制的根目录，这里是target目录 -->
                            <include>${project.build.finalName}.jar</include>  <!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
                        </resource>
                    </resources>

                </configuration>
            </plugin>
        </plugins>
    </build>


</project>
